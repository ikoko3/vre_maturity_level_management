{
  "openapi": "3.0.0",
  "info": {
    "title": "My API",
    "description": "API documentation with swagger-autogen",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User-related endpoints"
    }
  ],
  "paths": {
    "/lab/register": {
      "post": {
        "description": "",
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/labCreationSchema"
              }
            }
          }
        }
      }
    },
    "/lab/config-setup": {
      "post": {
        "description": "",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/lab/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/lab/by-alias/{alias}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/lab/detailed/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/lab/detailed/by-alias/{alias}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "alias",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/lab/{id}/exit_condition/{exit_condition_id}/update": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exit_condition_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/conditionUpdateSchema"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "labCreationSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dolphin watching Lab"
          },
          "alias": {
            "type": "string",
            "example": "DLPH-01"
          }
        },
        "required": [
          "name",
          "alias"
        ]
      },
      "conditionUpdateSchema": {
        "type": "object",
        "properties": {
          "is_fullfilled": {
            "type": "boolean",
            "example": true
          },
          "comments": {
            "type": "string",
            "example": ""
          }
        },
        "required": [
          "is_fullfilled",
          "comments"
        ]
      }
    }
  }
}